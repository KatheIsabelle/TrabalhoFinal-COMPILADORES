/* Bela.java */
/* Generated By:JavaCC: Do not edit this line. Bela.java */
import ast.*;
import java.util.*;
import java.io.*;
import java.nio.file.Files; // 
import java.nio.file.Paths; // 

public class Bela implements BelaConstants {
  public static void main(String args[]) throws Exception {
    FileInputStream fs = new FileInputStream(args[0]);
    Bela parser = new Bela(fs);
    Prog prog = parser.Bela(); // inicia a análise, aponta para raiz da árvore
    geraCodigo(prog, args[0]);
  }

 public static void geraCodigo(Prog prog, String arquivo) throws IOException {
    // Extrai o nome do arquivo sem a extensão (ex: "exemplo")
    String nomeClasse = arquivo.substring(0, arquivo.lastIndexOf('.'));

    // Usa o nome extraído para criar o nome do arquivo .java
    String nomeArquivoJava = nomeClasse + ".java";
    FileWriter fw = new FileWriter(nomeArquivoJava);
    PrintWriter out = new PrintWriter(fw);

    // Passa o nome da classe para o método de geração de código da árvore
    prog.gerarCodigo(out, nomeClasse); // Aqui começa a cascata!

    // Fecha o arquivo, garantindo que tudo foi salvo
    out.close();

    // --- INÍCIO: Novo código para imprimir o arquivo no terminal ---

    System.out.println("\n--- C\u00f3digo Gerado em '" + nomeArquivoJava + "' ---");

    // Lê todo o conteúdo do arquivo recém-criado para uma String
    String conteudo = Files.readString(Paths.get(nomeArquivoJava));

    // Imprime o conteúdo no terminal
    System.out.println(conteudo);

    // --- FIM: Novo código ---
  }

  static final public Prog Bela() throws ParseException {ArrayList<Fun> funs = new ArrayList<Fun>();
  Main main;
  Fun f;
    main = blocoMain();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUN:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      f = funcao();
funs.add(f);
    }
{if ("" != null) return new Prog(main, funs);}
    throw new Error("Missing return statement in function");
}

  static final public Fun funcao() throws ParseException {String tipo;
  ArrayList<ParamFormalFun> params;
  ArrayList<VarDecl> vars;
  ArrayList<Comando> cmds;
  Token id;
    jj_consume_token(FUN);
    tipo = tipo();
    id = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    params = parametros();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    vars = varDecls();
    cmds = comandos();
    jj_consume_token(RBRACE);
{if ("" != null) return new Fun(id.image, params, tipo, vars, cmds);}
    throw new Error("Missing return statement in function");
}

  static final public Main blocoMain() throws ParseException {ArrayList<VarDecl> vars;
  ArrayList<Comando> cmds;
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    vars = varDecls();
    cmds = comandos();
    jj_consume_token(RBRACE);
{if ("" != null) return new Main(vars, cmds);}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<VarDecl> varDecls() throws ParseException {ArrayList<VarDecl> lista = new ArrayList<VarDecl>();
  VarDecl v;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      v = varDecl();
lista.add(v);
    }
{if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
}

  static final public VarDecl varDecl() throws ParseException {String tipo;
  Token id;
    jj_consume_token(VAR);
    tipo = tipo();
    id = jj_consume_token(ID);
    jj_consume_token(SEMI);
{if ("" != null) return new VarDecl(tipo, id.image);}
    throw new Error("Missing return statement in function");
}

  static final public String tipo() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT_TYPE:{
      t = jj_consume_token(FLOAT_TYPE);
{if ("" != null) return "float";}
      break;
      }
    case BOOL:{
      t = jj_consume_token(BOOL);
{if ("" != null) return "bool";}
      break;
      }
    case VOID:{
      t = jj_consume_token(VOID);
{if ("" != null) return "void";}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<ParamFormalFun> parametros() throws ParseException {ArrayList<ParamFormalFun> lista = new ArrayList<ParamFormalFun>();
  ParamFormalFun p;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT_TYPE:
    case BOOL:
    case VOID:{
      p = param();
lista.add(p);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        p = param();
lista.add(p);
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
}

  static final public ParamFormalFun param() throws ParseException {String tipo;
  Token id;
    tipo = tipo();
    id = jj_consume_token(ID);
{if ("" != null) return new ParamFormalFun(id.image, tipo);}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Comando> comandos() throws ParseException {ArrayList<Comando> lista = new ArrayList<Comando>();
  Comando c;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINTLN:
      case IF:
      case WHILE:
      case RETURN:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      c = comando();
lista.add(c);
    }
{if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
}

  static final public Comando comando() throws ParseException {Token id;
  Exp e;
  ArrayList<Comando> bloco;
  ArrayList<Exp> args;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINTLN:{
      jj_consume_token(PRINTLN);
      e = expressao();
      jj_consume_token(SEMI);
{if ("" != null) return new CPrint(e);}
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
      e = expressao();
      jj_consume_token(SEMI);
{if ("" != null) return new CReturn(e);}
      break;
      }
    case IF:{
      jj_consume_token(IF);
      e = expressao();
      jj_consume_token(THEN);
      jj_consume_token(LBRACE);
      bloco = comandos();
      jj_consume_token(RBRACE);
{if ("" != null) return new CIf(e, bloco);}
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      e = expressao();
      jj_consume_token(LBRACE);
      bloco = comandos();
      jj_consume_token(RBRACE);
{if ("" != null) return new CWhile(e, bloco);}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      if (jj_2_1(2147483647)) {
        id = jj_consume_token(ID);
        jj_consume_token(LPAREN);
args = new ArrayList<>();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case TRUE:
        case FALSE:
        case ID:
        case NUM:{
          e = expressao();
args.add(e);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[6] = jj_gen;
              break label_5;
            }
            jj_consume_token(COMMA);
            e = expressao();
args.add(e);
          }
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        jj_consume_token(SEMI);
{if ("" != null) return new CChamadaFun(id.image, args);}
      } else if (jj_2_2(2147483647)) {
        id = jj_consume_token(ID);
        jj_consume_token(ASSIGN);
        jj_consume_token(READINPUT);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        jj_consume_token(SEMI);
{if ("" != null) return new CReadInput(id.image);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          // Regra para atribuição normal "id = expressao"
            id = jj_consume_token(ID);
          jj_consume_token(ASSIGN);
          e = expressao();
          jj_consume_token(SEMI);
{if ("" != null) return new CAtribuicao(id.beginLine, id.image, e);}
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public Exp expressao() throws ParseException {Exp e1, e2;
  Token op;
    e1 = expressaoLogica();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        e2 = expressaoLogica();
e1 = new EOpExp(op.image, e1, e2);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        e2 = expressaoLogica();
e1 = new EOpExp(op.image, e1, e2);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

  static final public Exp expressaoLogica() throws ParseException {Exp e1, e2;
  Token op;
    e1 = expressaoRelacional();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        op = jj_consume_token(AND);
        e2 = expressaoRelacional();
e1 = new EOpExp(op.image, e1, e2);
        break;
        }
      case OR:{
        op = jj_consume_token(OR);
        e2 = expressaoRelacional();
e1 = new EOpExp(op.image, e1, e2);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

  static final public Exp expressaoRelacional() throws ParseException {Exp e1, e2;
  Token op;
    e1 = termo();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:
      case GT:
      case EQ:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        op = jj_consume_token(LT);
        e2 = termo();
e1 = new EOpExp(op.image, e1, e2);
        break;
        }
      case GT:{
        op = jj_consume_token(GT);
        e2 = termo();
e1 = new EOpExp(op.image, e1, e2);
        break;
        }
      case EQ:{
        op = jj_consume_token(EQ);
        e2 = termo();
e1 = new EOpExp(op.image, e1, e2);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

  static final public Exp termo() throws ParseException {Exp e1, e2;
  Token op;
    e1 = fator();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:{
        op = jj_consume_token(MULT);
        e2 = fator();
e1 = new EOpExp(op.image, e1, e2);
        break;
        }
      case DIV:{
        op = jj_consume_token(DIV);
        e2 = fator();
e1 = new EOpExp(op.image, e1, e2);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

  static final public Exp fator() throws ParseException {Token t;
  ArrayList<Exp> args = new ArrayList<>();
  Exp e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      t = jj_consume_token(NUM);
{if ("" != null) return new EFloat(Float.parseFloat(t.image));}
      break;
      }
    case TRUE:{
      t = jj_consume_token(TRUE);
{if ("" != null) return new ETrue();}
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
{if ("" != null) return new EFalse();}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_3(2147483647)) {
        t = jj_consume_token(ID);
        jj_consume_token(LPAREN);
args = new ArrayList<>();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:
        case TRUE:
        case FALSE:
        case ID:
        case NUM:{
          e = expressao();
args.add(e);
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[18] = jj_gen;
              break label_10;
            }
            jj_consume_token(COMMA);
            e = expressao();
args.add(e);
          }
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
{if ("" != null) return new EChamadaFun(t.image, args);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          t = jj_consume_token(ID);
{if ("" != null) return new EVar(t.image);}
          break;
          }
        case LPAREN:{
          jj_consume_token(LPAREN);
          e = expressao();
          jj_consume_token(RPAREN);
{if ("" != null) return e;}
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(READINPUT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BelaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x10000,0x40,0x380,0x400000,0x380,0x6c00,0x400000,0x20000,0x6c00,0x0,0x3000000,0x3000000,0x30000000,0x30000000,0xc0000000,0xc0000000,0xc000000,0xc000000,0x400000,0x20000,0x0,0x20000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x1e,0x0,0x8,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x1e,0x16,0x8,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Bela(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Bela(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new BelaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Bela(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new BelaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new BelaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Bela(BelaTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BelaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[37];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 22; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 37; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 3; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
